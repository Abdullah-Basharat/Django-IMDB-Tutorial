API:Middle man
1) Private: Within Organization
2) Partner: Have access to partners like google and uber
3) Public: Any one can access or use this like weather forecast api

Urls:
Urls has two parts baseurl/ endpoint.
* baseurl is the same for all like organization domain abdullah.com/

REST architecture:
1) endpoint: api.
2) method: CRUD
            Create :  POST
            Read :    GET
            Update :  PUT
            Delete :  DELETE
3) headers: Are the status code like 200,404 and 500

4) the body/data: JSON to send request and response.

Makemigrations : Create a migration file that has changes in models.
Migrate: Apply physical migrations to the database

Django-REST-FrameWork(DRF):

Without DRF, to retrieve data contains steps:
a) GET:
    Query -------------> Complex Data Type -------> Python Native Data Type ------> JSON.
             Serialization
b) POST:
    JSON ----------------> Python Native Data Type -----------------------> Complex Data Type
            Parsing                                     De-Serialization


With DRF:
1) Types of Serializers:
    a) serializers.Serializer
    b) serializers.ModelSerializer

2) Types of Views:
    a) Class based views  (APIview)
    b) Function based views (@api_view())

Validations:
1) Field level validations define as validate_fieldname (Validate individual field like field name should have length > 2)
2) Object level validations define as validate (Validate object means compare two fields of object. Pswd and Confirm Psw should same.)
3) Validators define as pass in the parameters in the field of serializer and define that function.

Serializer: We have to create fields again for eac model and also have to write .create() and .update() method.
ModelSerializer: Simpy gives models name in Meta class and fields to include or exclude.

But in both serializers we should define validations if we use .is_valid() method.
--> Serializer methodfield is used to create another attribute that is not defined in the Model.
And have a specific syntax field_name and function should be get_field_name().

                              ---------------------------------







