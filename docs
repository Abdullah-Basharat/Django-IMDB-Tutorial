API:Middle man

1. Private: Within Organization
2. Partner: Have access to partners like google and uber
3. Public: Any one can access or use this like weather forecast api

Urls:
Urls has two parts baseurl/ endpoint.

- baseurl is the same for all like organization domain abdullah.com/

REST architecture:

1. endpoint: api.
2. method: CRUD
   Create : POST
   Read : GET
   Update : PUT
   Delete : DELETE
3. headers: Are the status code like 200,404 and 500

4. the body/data: JSON to send request and response.

Makemigrations : Create a migration file that has changes in models.
Migrate: Apply physical migrations to the database

Django-REST-FrameWork(DRF):

Without DRF, to retrieve data contains steps:
a) GET:
Query -------------> Complex Data Type -------> Python Native Data Type ------> JSON.
Serialization
b) POST:
JSON ----------------> Python Native Data Type -----------------------> Complex Data Type
Parsing De-Serialization

With DRF:

1. Types of Serializers:
   a) serializers.Serializer
   b) serializers.ModelSerializer

2. Types of Views:
   a) Class based views (APIview)
   b) Function based views (@api_view())

Validations:

1. Field level validations define as validate_fieldname (Validate individual field like field name should have length > 2)
2. Object level validations define as validate (Validate object means compare two fields of object. Pswd and Confirm Psw should same.)
3. Validators define as pass in the parameters in the field of serializer and define that function.

Serializer: We have to create fields again for eac model and also have to write .create() and .update() method.
ModelSerializer: Simpy gives models name in Meta class and fields to include or exclude.

But in both serializers we should define validations if we use .is_valid() method.
--> Serializer methodfield is used to create another attribute that is not defined in the Model.
And have a specific syntax field_name and function should be get_field_name().

                              ---------------------------------

Relationships in Django:

1. ONE-TO-ONE
2. MANY-TO-ONE
3. MANY-TO-MANY

Nested Serializer: It is when we define relationship between models and want to display hierarcy of instances.

HyperlinkSerializer and Hyperlinkfield should add context={'request': request} at the time of initialization of serialization.
And it gives you the hyperlink of complete object.

Mixins: It is a class based api view and provides generic api and provides build in methods .create() , .update() etc
that we have to built manually in APIVIEW class.

Concrete View Classes: It is one more level abstraction and the API class we inherit already have the mixins
so we dont need to write .get(), .post() etc.

In this we have simple two things:
serilaizer_class = ?
query_set = Retrieve objects from where get method apply.

if you want to change query_set, you have to override get_queryset(self):

and if you have a specific logic than you have to create mehtods:

1. perform_create()
2. perform_update()
3. perform_destroy()

ViewSets and Routers:
View set is useful in a way when you want all or individual item.
have methods list(), retreive()
-> Router in this way define a url for both and handles automatically.

ModelViewSet has abstraction like concreate clsses and have all the control on model by just
defining queryset and Serializer.

Permissions: To restricted soemthing from some one.

1. On all app include permission in settings.py
2. Object level permession, specific url accessed after login.

Authentications:

1. Which user has login rights or not?

Basic Authentication: Login with user and password of base64 from post man.

Token Authentication:

1. Token is an entry point for a website like in a car parking we have saccess our car if we have token ticket that is generated at our entry in parking.
2. Token is generated when user sign up.
3. With token user access restricted pages.
4. When Log out, destry that token

5. rest_framework provides login functionality by using views obatin_auth_token.
6. for registaration process define serializers for User method and add new field of confirm password and return token in a JSON.

JWT (JavaScript Web Token):

When you frontend is around JS frameworks like (Reaact,Angular )etc.
Use JWT to reguster and login.
It uses two tokens:

1.  Access Token (Destroy after 5 mins)
2.  Refresh Token (Destroy after 24 hrs)

Throtling:

It means how many requests one user can send. (Free user can send 20 and paid user can send unlimited).
Types:

1. AnonRateThrottle (Anonymoius user)
2. UserRateThrottle (Regisstered user)

Filtering: It is all about work like a query_set() method of concrete classes.
We can do three things by filtering.

1. Filter
2. Search
3. Order

django_filter package runs on Genericclasses only.

Pagination:

1. Divide the number of objects to display per page.
2. PageOffset Pagination (Have next and previous page pointer)
3. LimitOffset Pagination (limit and offset = 5 and 12 means we need 5 objects after 12th objects.)Helpful when user has api of seller and received json response. He can adjust then the limit and offset.
4. Cursor Pagination

Testing:

1.  Write test case of your apis and test them.
2.  Each app has its own test.py.
3.  We can also make a test folder name should start with test.
4.  Run : python manage.py test.

                                 <------------------------------------->
